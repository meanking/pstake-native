syntax = "proto3";
package pstake.liquidstakeibc.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/persistenceOne/pstake-native/v2/x/liquidstakeibc/types";

message HostChain {
  option (gogoproto.goproto_stringer) = true;

  // host chain id
  string chain_id = 1;
  // ibc connection id
  string connection_id = 2;
  // module params
  HostChainLSParams params = 3;
  // native token denom
  string host_denom = 4;
  // ibc connection channel id
  string channel_id = 5;
  // ibc connection port id
  string port_id = 6;
  // delegation host account
  ICAAccount delegation_account = 7;
  // reward host account
  ICAAccount rewards_account = 8;
  // validator set
  repeated Validator validators = 9;
  // minimum ls amount
  string minimum_deposit = 11 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  // redemption rate
  string c_value = 12 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

message HostChainLSParams {
  string deposit_fee = 1 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ]; // protocol fee in percentage
  string restake_fee = 2 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ]; // protocol fee in percentage
  string unstake_fee = 3 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ]; // protocol fee in percentage
  string redemption_fee = 4 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ]; // protocol fee in percentage
}

message ICAAccount {
  // address of the ica on the controller chain
  string address = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // balance of the ica
  repeated cosmos.base.v1beta1.Coin balance = 2 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
  // owner string
  string owner = 3;
}

message Validator {
  // valoper address
  string operator_address = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // validator status
  string status = 2;
  // validator commission rate
  string commission_rate = 3 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

message Deposit {
  enum DepositState {
    DEPOSIT_PENDING = 0;
    DEPOSIT_SENT = 1;
    DEPOSIT_RECEIVED = 2;
    DEPOSIT_DELEGATED = 3;
  }

  // deposit target chain
  string chain_id = 1;
  cosmos.base.v1beta1.Coin amount = 2 [
    (gogoproto.nullable) = false
  ];
  // epoch number of the deposit
  string epoch = 3 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  // state
  DepositState state = 4;
  // sequence id of the ibc transfer deposit
  string ibc_sequence = 5 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message KVUpdate {
  string key = 1;
  string value = 2;
}
