syntax = "proto3";
package pstake.liquidstakeibc.v1beta1;

import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/persistenceOne/pstake-native/v2/x/liquidstakeibc/types";

//option (gogoproto.goproto_stringer) = false;

message HostChain {
  option (gogoproto.goproto_stringer) = true;

  // host chain id
  string chain_id = 1;
  // ibc connection id
  string connection_id = 2;
  // protocol token denom
  string local_denom = 3;
  // native token denom
  string host_denom = 4;
  // delegation host account
  ICAAccount delegation_account = 5;
  // reward host account
  ICAAccount rewards_account = 6;
  // minimum ls amount
  string minimum_deposit = 7 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  // redemption rate
  string c_value = 8 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}

message ICAAccount {
  // address of the ica on the controller chain
  string address = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  // balance of the ica
  repeated cosmos.base.v1beta1.Coin balance = 2 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
  // owner string
  string owner = 3;
}

//message Validator {
//  string address = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
//}

message KVUpdate {
  string key = 1;
  string value = 2;
}
