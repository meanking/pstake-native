// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: squad/liquidstaking/v1beta1/liquidstaking.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TODO: simplify
// ValidatorStatus enumerates the status of a liquid validator.
type ValidatorStatus int32

const (
	// VALIDATOR_STATUS_UNSPECIFIED defines the default status.
	ValidatorStatusUnspecified ValidatorStatus = 0
	// VALIDATOR_STATUS_ACTIVE defines the ...
	ValidatorStatusActive ValidatorStatus = 1
	// VALIDATOR_STATUS_DELISTING defines the ...
	ValidatorStatusDelisting ValidatorStatus = 2
	// VALIDATOR_STATUS_DELISTED defines the ...
	ValidatorStatusDelisted ValidatorStatus = 3
)

var ValidatorStatus_name = map[int32]string{
	0: "VALIDATOR_STATUS_UNSPECIFIED",
	1: "VALIDATOR_STATUS_ACTIVE",
	2: "VALIDATOR_STATUS_DELISTING",
	3: "VALIDATOR_STATUS_DELISTED",
}

var ValidatorStatus_value = map[string]int32{
	"VALIDATOR_STATUS_UNSPECIFIED": 0,
	"VALIDATOR_STATUS_ACTIVE":      1,
	"VALIDATOR_STATUS_DELISTING":   2,
	"VALIDATOR_STATUS_DELISTED":    3,
}

func (x ValidatorStatus) String() string {
	return proto.EnumName(ValidatorStatus_name, int32(x))
}

func (ValidatorStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d74351e2d3b011d8, []int{0}
}

// Params defines the set of params for the liquidstaking module.
type Params struct {
	BondedBondDenom       string                 `protobuf:"bytes,1,opt,name=bonded_bond_denom,json=bondedBondDenom,proto3" json:"bonded_bond_denom,omitempty" yaml:"bonded_bond_denom"`
	WhitelistedValidators []WhitelistedValidator `protobuf:"bytes,2,rep,name=whitelisted_validators,json=whitelistedValidators,proto3" json:"whitelisted_validators" yaml:"whitelisted_validators"`
	// unstake_fee_rate specifies the ...
	UnstakeFeeRate github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=unstake_fee_rate,json=unstakeFeeRate,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"unstake_fee_rate" yaml:"unstake_fee_rate"`
	// Minimum number of coins to be staked to the active liquid validators on liquid staking.
	MinLiquidStakingAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=min_liquid_staking_amount,json=minLiquidStakingAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_liquid_staking_amount" yaml:"min_liquid_staking_amount"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_d74351e2d3b011d8, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// WhitelistedValidator defines a ... TBD
type WhitelistedValidator struct {
	// validator_address defines the bech32-encoded address that whitelisted validator
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty" yaml:"validator_address"`
	// target_weight specifies the target weight for liquid staking, unstaking amount
	TargetWeight github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=target_weight,json=targetWeight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"target_weight" yaml:"target_weight"`
}

func (m *WhitelistedValidator) Reset()         { *m = WhitelistedValidator{} }
func (m *WhitelistedValidator) String() string { return proto.CompactTextString(m) }
func (*WhitelistedValidator) ProtoMessage()    {}
func (*WhitelistedValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_d74351e2d3b011d8, []int{1}
}
func (m *WhitelistedValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhitelistedValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WhitelistedValidator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WhitelistedValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhitelistedValidator.Merge(m, src)
}
func (m *WhitelistedValidator) XXX_Size() int {
	return m.Size()
}
func (m *WhitelistedValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_WhitelistedValidator.DiscardUnknown(m)
}

var xxx_messageInfo_WhitelistedValidator proto.InternalMessageInfo

// LiquidValidator defines a ... TBD
type LiquidValidator struct {
	// operator_address defines the address of the validator's operator; bech encoded in JSON.
	OperatorAddress string `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty" yaml:"operator_address"`
	// status is the liquid validator status
	Status ValidatorStatus `protobuf:"varint,2,opt,name=status,proto3,enum=squad.liquidstaking.v1beta1.ValidatorStatus" json:"status,omitempty"`
	// weight specifies the weight for liquid staking, unstaking amount
	Weight github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=weight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"weight" yaml:"weight"`
}

func (m *LiquidValidator) Reset()         { *m = LiquidValidator{} }
func (m *LiquidValidator) String() string { return proto.CompactTextString(m) }
func (*LiquidValidator) ProtoMessage()    {}
func (*LiquidValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_d74351e2d3b011d8, []int{2}
}
func (m *LiquidValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidValidator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidValidator.Merge(m, src)
}
func (m *LiquidValidator) XXX_Size() int {
	return m.Size()
}
func (m *LiquidValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidValidator.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidValidator proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("squad.liquidstaking.v1beta1.ValidatorStatus", ValidatorStatus_name, ValidatorStatus_value)
	proto.RegisterType((*Params)(nil), "squad.liquidstaking.v1beta1.Params")
	proto.RegisterType((*WhitelistedValidator)(nil), "squad.liquidstaking.v1beta1.WhitelistedValidator")
	proto.RegisterType((*LiquidValidator)(nil), "squad.liquidstaking.v1beta1.LiquidValidator")
}

func init() {
	proto.RegisterFile("squad/liquidstaking/v1beta1/liquidstaking.proto", fileDescriptor_d74351e2d3b011d8)
}

var fileDescriptor_d74351e2d3b011d8 = []byte{
	// 799 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xde, 0x75, 0x42, 0xa0, 0x03, 0xad, 0xb7, 0xab, 0xa4, 0xb1, 0x37, 0x61, 0xd7, 0x5a, 0x09,
	0x54, 0x21, 0xec, 0xc5, 0x41, 0xea, 0xc1, 0xe2, 0xc0, 0xba, 0xeb, 0xc0, 0x56, 0x51, 0x89, 0xd6,
	0x4e, 0x2a, 0xb8, 0xac, 0xc6, 0xde, 0xc9, 0x66, 0x1a, 0xef, 0xcc, 0xd6, 0x33, 0x76, 0xe8, 0x85,
	0x73, 0xe5, 0x1e, 0x40, 0x95, 0x90, 0xb8, 0x58, 0x8a, 0x40, 0xfc, 0x2f, 0x3d, 0xf6, 0x88, 0x38,
	0x58, 0x28, 0x39, 0xc0, 0xd9, 0x7f, 0x01, 0xf2, 0xcc, 0xc6, 0x51, 0x6c, 0xb7, 0x12, 0xa2, 0xbe,
	0xcc, 0xbe, 0x1f, 0xdf, 0x7b, 0xef, 0xfb, 0xe6, 0x79, 0x17, 0x38, 0xec, 0x49, 0x1f, 0x46, 0x4e,
	0x17, 0x3f, 0xe9, 0xe3, 0x88, 0x71, 0x78, 0x82, 0x49, 0xec, 0x0c, 0xaa, 0x6d, 0xc4, 0x61, 0xf5,
	0xba, 0xb7, 0x92, 0xf6, 0x28, 0xa7, 0xfa, 0x96, 0x00, 0x54, 0xae, 0x87, 0x32, 0x80, 0xb1, 0x1e,
	0xd3, 0x98, 0x8a, 0x3c, 0x67, 0xfa, 0x24, 0x21, 0x46, 0xb1, 0x43, 0x59, 0x42, 0x59, 0x28, 0x03,
	0xd2, 0xc8, 0x42, 0xa6, 0xb4, 0x9c, 0x36, 0x64, 0x68, 0xd6, 0xb6, 0x43, 0x31, 0xc9, 0xe2, 0x56,
	0x4c, 0x69, 0xdc, 0x45, 0x8e, 0xb0, 0xda, 0xfd, 0x23, 0x87, 0xe3, 0x04, 0x31, 0x0e, 0x93, 0x34,
	0x4b, 0x90, 0x47, 0xa7, 0x1c, 0x23, 0x52, 0xa6, 0x29, 0x22, 0x30, 0xc5, 0x83, 0x1d, 0x87, 0xa6,
	0x1c, 0x53, 0xc2, 0x1c, 0x48, 0x08, 0xe5, 0x50, 0x3c, 0xcb, 0x44, 0xfb, 0xf9, 0x2a, 0x58, 0xdb,
	0x87, 0x3d, 0x98, 0x30, 0xfd, 0x6b, 0x70, 0xbb, 0x4d, 0x49, 0x84, 0xa2, 0x70, 0x7a, 0x84, 0x11,
	0x22, 0x34, 0x29, 0xa8, 0x25, 0xf5, 0xee, 0x8d, 0xfa, 0xf6, 0x64, 0x6c, 0x15, 0x9e, 0xc2, 0xa4,
	0x5b, 0xb3, 0x17, 0x52, 0xec, 0x20, 0x2f, 0x7d, 0x75, 0x4a, 0x22, 0x6f, 0xea, 0xd1, 0x7f, 0x54,
	0xc1, 0x9d, 0xd3, 0x63, 0xcc, 0x51, 0x17, 0x33, 0x8e, 0xa2, 0x70, 0x00, 0xbb, 0x38, 0x82, 0x9c,
	0xf6, 0x58, 0x21, 0x57, 0x5a, 0xb9, 0xfb, 0xfe, 0x4e, 0xb5, 0xf2, 0x06, 0xd5, 0x2a, 0x8f, 0xae,
	0xa0, 0x87, 0x97, 0xc8, 0xfa, 0x47, 0x2f, 0xc7, 0x96, 0x32, 0x19, 0x5b, 0x1f, 0xca, 0x31, 0x96,
	0x97, 0xb7, 0x83, 0x8d, 0xd3, 0x25, 0x60, 0xa6, 0x33, 0xa0, 0xf5, 0xc9, 0xb4, 0x0f, 0x0a, 0x8f,
	0x10, 0x0a, 0x7b, 0x90, 0xa3, 0xc2, 0x8a, 0xa0, 0xe6, 0x4f, 0xeb, 0xfe, 0x39, 0xb6, 0x3e, 0x8e,
	0x31, 0x3f, 0xee, 0xb7, 0x2b, 0x1d, 0x9a, 0x64, 0x57, 0x92, 0x1d, 0x65, 0x16, 0x9d, 0x38, 0xfc,
	0x69, 0x8a, 0x58, 0xc5, 0x43, 0x9d, 0xc9, 0xd8, 0xda, 0x94, 0x13, 0xcc, 0xd7, 0xb3, 0x83, 0x5b,
	0x99, 0x6b, 0x17, 0xa1, 0x00, 0x72, 0xa4, 0xff, 0xae, 0x82, 0x62, 0x82, 0x49, 0x28, 0x59, 0x86,
	0x19, 0xcd, 0x10, 0x26, 0xb4, 0x4f, 0x78, 0xe1, 0x1d, 0xd1, 0xfe, 0xf1, 0x0b, 0x77, 0xe3, 0xc1,
	0x0d, 0xbb, 0xfa, 0x99, 0xf8, 0xd9, 0xbf, 0xe6, 0xde, 0x65, 0xd1, 0x49, 0xc5, 0x27, 0xfc, 0x3f,
	0x8c, 0xe5, 0x13, 0x3e, 0x19, 0x5b, 0x25, 0x39, 0xd6, 0x6b, 0x1b, 0xda, 0xc1, 0x9d, 0x04, 0x93,
	0x3d, 0x11, 0x6a, 0xca, 0x88, 0x2b, 0x02, 0xb5, 0xf7, 0x9e, 0x9d, 0x59, 0xca, 0x2f, 0x67, 0x96,
	0x62, 0xff, 0xad, 0x82, 0xf5, 0x65, 0xea, 0xeb, 0x3e, 0xb8, 0x3d, 0x53, 0x39, 0x84, 0x51, 0xd4,
	0x43, 0x8c, 0x2d, 0xee, 0xc6, 0x42, 0x8a, 0x1d, 0x68, 0x33, 0x9f, 0x2b, 0x5d, 0xfa, 0x0f, 0xe0,
	0x26, 0x87, 0xbd, 0x18, 0xf1, 0xf0, 0x14, 0xe1, 0xf8, 0x98, 0x17, 0x72, 0xa2, 0xcc, 0xb7, 0x2f,
	0x5c, 0xed, 0xc1, 0xaa, 0x5d, 0xfd, 0x5f, 0x1a, 0xac, 0xcb, 0x39, 0xae, 0xd5, 0xb7, 0x83, 0x0f,
	0xa4, 0xfd, 0x48, 0x98, 0xb5, 0xd5, 0x29, 0x5b, 0xfb, 0xe7, 0x1c, 0xc8, 0x4b, 0x2d, 0xae, 0x48,
	0xee, 0x02, 0x8d, 0xa6, 0xa8, 0xb7, 0x84, 0xe3, 0xd6, 0xd5, 0xb5, 0xcf, 0x67, 0xd8, 0x41, 0xfe,
	0xd2, 0x75, 0xc9, 0xd0, 0x03, 0x6b, 0x8c, 0x43, 0xde, 0x67, 0x82, 0xda, 0xad, 0x9d, 0x4f, 0xdf,
	0xb8, 0xed, 0xb3, 0xfe, 0x4d, 0x81, 0x09, 0x32, 0xac, 0xfe, 0x18, 0xac, 0x65, 0x02, 0xc9, 0x45,
	0x0d, 0xde, 0x86, 0x40, 0x37, 0xb3, 0x7f, 0x4f, 0xa6, 0x4c, 0xd6, 0x41, 0x6e, 0xc0, 0x3f, 0x67,
	0x96, 0xf2, 0xc9, 0xf3, 0x1c, 0xc8, 0xcf, 0x4d, 0xa4, 0x7f, 0x09, 0xb6, 0x0f, 0xdd, 0x3d, 0xdf,
	0x73, 0x5b, 0xdf, 0x04, 0x61, 0xb3, 0xe5, 0xb6, 0x0e, 0x9a, 0xe1, 0xc1, 0xc3, 0xe6, 0x7e, 0xe3,
	0xbe, 0xbf, 0xeb, 0x37, 0x3c, 0x4d, 0x31, 0xcc, 0xe1, 0xa8, 0x64, 0xcc, 0xc1, 0x0e, 0x08, 0x4b,
	0x51, 0x07, 0x1f, 0x61, 0x14, 0xe9, 0xf7, 0xc0, 0xe6, 0x42, 0x05, 0xf7, 0x7e, 0xcb, 0x3f, 0x6c,
	0x68, 0xaa, 0x51, 0x1c, 0x8e, 0x4a, 0x1b, 0x73, 0x60, 0xb7, 0xc3, 0xf1, 0x00, 0xe9, 0x5f, 0x00,
	0x63, 0x01, 0xe7, 0x35, 0xf6, 0xfc, 0x66, 0xcb, 0x7f, 0xf8, 0x95, 0x96, 0x33, 0xb6, 0x87, 0xa3,
	0x52, 0x61, 0x0e, 0xea, 0x89, 0xe5, 0xc5, 0x24, 0xd6, 0x6b, 0xa0, 0xf8, 0x1a, 0x74, 0xc3, 0xd3,
	0x56, 0x8c, 0xad, 0xe1, 0xa8, 0xb4, 0xb9, 0x14, 0x8c, 0x22, 0x63, 0xf5, 0xd9, 0x6f, 0xa6, 0x52,
	0xdf, 0x7f, 0x79, 0x6e, 0xaa, 0xaf, 0xce, 0x4d, 0xf5, 0xaf, 0x73, 0x53, 0xfd, 0xe9, 0xc2, 0x54,
	0x5e, 0x5d, 0x98, 0xca, 0x1f, 0x17, 0xa6, 0xf2, 0xdd, 0xbd, 0x05, 0xc9, 0xa7, 0x57, 0x5c, 0xee,
	0xc2, 0x36, 0xcb, 0x3e, 0x21, 0xdf, 0xcf, 0x7d, 0x44, 0xc4, 0x35, 0xb4, 0xd7, 0xc4, 0x6b, 0xf7,
	0xf3, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xcb, 0xcf, 0x85, 0xda, 0x68, 0x06, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.MinLiquidStakingAmount.Size()
		i -= size
		if _, err := m.MinLiquidStakingAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.UnstakeFeeRate.Size()
		i -= size
		if _, err := m.UnstakeFeeRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.WhitelistedValidators) > 0 {
		for iNdEx := len(m.WhitelistedValidators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WhitelistedValidators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.BondedBondDenom) > 0 {
		i -= len(m.BondedBondDenom)
		copy(dAtA[i:], m.BondedBondDenom)
		i = encodeVarintLiquidstaking(dAtA, i, uint64(len(m.BondedBondDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WhitelistedValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhitelistedValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhitelistedValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TargetWeight.Size()
		i -= size
		if _, err := m.TargetWeight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintLiquidstaking(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiquidValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Weight.Size()
		i -= size
		if _, err := m.Weight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstaking(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Status != 0 {
		i = encodeVarintLiquidstaking(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintLiquidstaking(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLiquidstaking(dAtA []byte, offset int, v uint64) int {
	offset -= sovLiquidstaking(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BondedBondDenom)
	if l > 0 {
		n += 1 + l + sovLiquidstaking(uint64(l))
	}
	if len(m.WhitelistedValidators) > 0 {
		for _, e := range m.WhitelistedValidators {
			l = e.Size()
			n += 1 + l + sovLiquidstaking(uint64(l))
		}
	}
	l = m.UnstakeFeeRate.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	l = m.MinLiquidStakingAmount.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	return n
}

func (m *WhitelistedValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovLiquidstaking(uint64(l))
	}
	l = m.TargetWeight.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	return n
}

func (m *LiquidValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovLiquidstaking(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovLiquidstaking(uint64(m.Status))
	}
	l = m.Weight.Size()
	n += 1 + l + sovLiquidstaking(uint64(l))
	return n
}

func sovLiquidstaking(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLiquidstaking(x uint64) (n int) {
	return sovLiquidstaking(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondedBondDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondedBondDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistedValidators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WhitelistedValidators = append(m.WhitelistedValidators, WhitelistedValidator{})
			if err := m.WhitelistedValidators[len(m.WhitelistedValidators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakeFeeRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnstakeFeeRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLiquidStakingAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinLiquidStakingAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WhitelistedValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhitelistedValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhitelistedValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetWeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TargetWeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= ValidatorStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstaking(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstaking
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLiquidstaking(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLiquidstaking
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidstaking
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLiquidstaking
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLiquidstaking
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLiquidstaking
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLiquidstaking        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLiquidstaking          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLiquidstaking = fmt.Errorf("proto: unexpected end of group")
)
